
================================================================================================
TUTORIAL 2


Question 1.
~~~~~~~~~~~
When compiled statically, both programs (hello.static and syscall-hello.static) had ~52 times bigger size than their counterparts that were compiled dynamically.

Question 2.
~~~~~~~~~~~
The dynamic version of the executable seems to produce more system calls (more output is shown in log file) than dynamic version of code.The exact number can be calculated by counting each system call. 

Question 3.
~~~~~~~~~~~
The dynamic version of hello.dynamic produced 1 system call, while static version have none.

Question 4.
~~~~~~~~~~~
In order for hello-main to run, first we need to create dynamic library from hellolib.c.
Then we need to move the generated linked library to the /lib/ folder and set the environmental variable LD_LIBRARY_PATH to the path where our newly generated library.so is located. (Alternatively, we can set LD_LIBRARY_PATH to the location where we moved the ***.so file, if we deside to keep it in other place).
Then you can run hello-main.
Sample output is shown below:
student@compxxxx:~/COMP3000/tut2$ sudo cp libhello.so /lib/
student@compxxxx:~/COMP3000/tut2$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/lib/
student@compxxxx:~/COMP3000/tut2$ ./hello-main 
Hello world!

Question 5.
~~~~~~~~~~~
Here is the list of dynamic libraries that top command has:
     linux-vdso.so.1 (0x00007ffc0cbf9000)
     libprocps.so.8 => /lib/x86_64-linux-gnu/libprocps.so.8 (0x00007f81dc4c6000)
     libtinfo.so.6 => /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007f81dc496000)
     libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f81dc2a4000)
     libsystemd.so.0 => /lib/x86_64-linux-gnu/libsystemd.so.0 (0x00007f81dc1f7000)
     libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f81dc1f1000)
     /lib64/ld-linux-x86-64.so.2 (0x00007f81dc546000)
     librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f81dc1e6000)
     liblzma.so.5 => /lib/x86_64-linux-gnu/liblzma.so.5 (0x00007f81dc1bd000)
     liblz4.so.1 => /lib/x86_64-linux-gnu/liblz4.so.1 (0x00007f81dc19c000)
     libgcrypt.so.20 => /lib/x86_64-linux-gnu/libgcrypt.so.20 (0x00007f81dc07e000)
     libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f81dc05b000)
     libgpg-error.so.0 => /lib/x86_64-linux-gnu/libgpg-error.so.0 (0x00007f81dc038000)

Question 6.
~~~~~~~~~~
When "top" is terminated it receives TERM signal as shown below (default kill signal):
1847  --- SIGTERM {si_signo=SIGTERM, si_code=SI_USER, si_pid=1197, si_uid=1000} ---
SIGTERM - is the system call that sends the termination signal.


Question 7.
~~~~~~~~~~~
Addresses are inconsisten between runs due to address space randonization. This is done for security reasons, so that it would be difficult to make an attack on some space.

Question 8.
~~~~~~~~~~~
Stack seem to be located at higher addresses, where argv, argv[0], envp, $buf, and $lmsg are.
Heap is located at lower addresses, where buf[0], sbrk, lmsg are.
Code segment is located below the heap (loer addresses than for Heap), where gmsg, main, etc. are.
Global variables should have higher addresses than Code segment, but lower than Heap.

Question 9.
~~~~~~~~~~
When allocating more than 128 kB at each malloc, the stack address space is being occuppied by sbrk (The addresses are memory mapped onto higher adresses, which in original file belonget to stack) causing this way the overflow to stack. 

Question 10.
~~~~~~~~~~~
When adding the extra code, the values are just where I expect them to be:
- adding global vars, allocates space for them in closer to the low addresses.
- using more mallocs - adds up addresses higher (closer where the heap is).

Optional tasks:
~~~~~~~~~~~~~~
From the way that I see /dev/stdout (stdin, stderr) - the values are global.
The pseudo-terminals are local to their terminal, since they have different numbers (0, 1.. not sure what they mean yet).
I can pass parameters from one tereminal to another.


====================================================================================================================

TUTORIAL 3

Question 1.
~~~~~~~~~~~

Question 2.
~~~~~~~~~~~
When running programs with 3000shell on a foreground, shell returns to the prompt after program finished its execution which is acheived by wait() function (program waits for foreground process to finish before returning to main tread). On the other hand, when running programs on a backgroung, we only receive warning that the process is runnig on a background for commands like ls, bc and input is needed to return to the prompt. However, for programs like top - when runnig on a background - the 3000shell became unresponsive to input and output of the backgroud process clutters the screen. The only way to stop program is to to send SIGTERM signal.


Question 3.
~~~~~~~~~~~
One of the reliable ways to recover from background process in 3000shell is to send SIGTERM signal (Ctrl-C). However, after the ls command shell could be recovered with typing any input. 


Question 4.
~~~~~~~~~~~
to redirect standart output to a file in a bash shell we use 0> , or simply > sign. 

Question 5.
~~~~~~~~~~~
The check for pid == -1 is needed for verufying that process is running. If pid=-1, that means that process with pid is no longer running and program (signal handler) simply returns. 

Question 6.
~~~~~~~~~~
Added the print statement to show every attempt to find a binary.
First attempt at:

  if (name[0] == '.' || name[0] == '/') {
                strncpy(fn, name, fn_size);
                printf("Attempt to find %s\n", name);
                return;
        }

Second attempt at:

  if (stat_return == 0) {
                        printf("Attempt to find %s\n", fn);
                        return;
                }



Question 7.
~~~~~~~~~~~
Added code to print "Ouch!" when SIGUSR1 is sent:

        if (the_signal != SIGUSR1) {
                fprintf(stderr, "Ouch!\n");
                return;
        }

Question 8.
~~~~~~~~~~~
After deleting

      signal_handler_struct.sa_flags = SA_RESTART;

3000shell behaviour changed in a way that if you run program on a background, the 3000shell terminates after child process have finished.

Question 9.
~~~~~~~~~~
getenv() takes in only one parameter, which is environmental variable name, whereas find_env() takes three defined parameters, with one of them being a default valu for environment variable name. 

Question 10.
~~~~~~~~~~~
Part of the implementation is for showing PPID:

  setup_status_fn(e->d_name, stat_fn);
  fd = open(stat_fn, O_RDONLY);
       if (fd > -1){
           k = read(fd, stat, 512);
           close(fd);
           num_n = 0;
           for(i=0; i<k; i++){
               if (stat[i] == '\n') {
 	                    num_n++;
                           }
               if (num_n == 6){
                           i++;
                           int i_pid = 0;
                           while(stat[i] != '\n'){
                                   if (isdigit(stat[i])){
                                         p_pid[i_pid] = stat[i];
                                         i_pid++;
                                        }
                                   i++;
                                  }
                           break;
                           }
                         }
                } else {
           fprintf(stderr, "ERROR: could not open %s\n", e->d_name);
        }
      printf("%s: PPID:%s  %s\n", e->d_name, p_pid, comm);

Full version of source file is at the bottom of the page. 

Question 11.
~~~~~~~~~~~
As far as I understood, stderr implementation in plist() is done in else{} blocks for file descriptors in the way such that error message prints out to stderr:

   fprintf(stderr, "ERROR: Could not open %s\n", e->d_name);

Question 12.
~~~~~~~~~~~
Implementation of redirection of standard output for plist() is not done, since I'm confused at which point this redirection should happen: inside plist() function or as a part of runprogram() function? 
~~~~~~~~~~~~~~



=====================================================================================================

COMP3000
Tutorial 4

Q1.
~~~~~~~~~~~
Compiled. Can login as new user.

Q2.
~~~~~~~~~~~
Syntax highlighting is gone because the environment changed. To preserve the environmental variable responvible for color scheme, we need not to clear the environment with clearenv(). 

Q3.
~~~~~~~~~~~
The getpwnam() returns password as "x" since the password is hashed.

Q4.
~~~~~~~~~~~
When running 3000userlogin as a regular user (user owner)  - only the user can execute the program, the values for uid, euid, gid, egid are all the same and they show the current user's id (in this case 1000).

     student@compxxxx:~/CODE/3000/t4/tut4$ sudo chown student:student 3000userlogin
     student@compxxxx:~/CODE/3000/t4/tut4$ sudo chmod u+s 3000userlogin
     student@compxxxx:~/CODE/3000/t4/tut4$ ./3000userlogin student
     uid=1000, euid=1000, gid=1000, egid=1000

When runnig the program with setuid root, the values for uid, gid and egid belong to user, but euid = 0, so effective user id is root. 

     student@compxxxx:~/CODE/3000/t4/tut4$ sudo chown root:root 3000userlogin
     student@compxxxx:~/CODE/3000/t4/tut4$ sudo chmod u+s 3000userlogin
     student@compxxxx:~/CODE/3000/t4/tut4$ ./3000userlogin kate
     uid=1000, euid=0, gid=1000, egid=1000
     student@compxxxx:~/CODE/3000/t4/tut4$ ./3000userlogin student
     uid=1000, euid=0, gid=1000, egid=1000
     
When running 3000userlogin as root without setuid bit set - all the ids are equal to 0, so the program is being executed as if it belongs to root. 
          
	  student@compxxxx:~/CODE/3000/t4/tut4$ sudo ./3000userlogin kate
	  uid=0, euid=0, gid=0, egid=0

Q5.
~~~~~~~~~~~~~
The 3000userlogin changes gid before uid because if is run as root it will lose priviledge to change gid, if uid was first changed to non-root. Therefore, gid must be changed first, while program has root priviledge to do so.

Q6.
~~~~~~~~~~~~~
Changing the login shell to 3000userlogin shell was not possible (for me).

Q7.
~~~~~~~~~~~~~
It is possible to set users default shell to 3000shell. In order for chsh to accept the 3000shell this shell should to listed in /etc/shells. Only superuser can change the default login shell.  For this reason, placing /bin/rsh in
       /etc/shells is discouraged since accidentally changing to a restricted
       shell would prevent the user from ever changing her login shell back to
       its original value. (not sure)

Q8.
~~~~~~~~~~~~~
The users login shell have to be a valid shell. The list of valid login shells can be found in /etc/shell list. The root super user can run another program as a shell.  


Q9.
~~~~~~~~~~~~~
Each of the env variable set by 3000userlogin is needed to login as a user that is passed as an argument to 3000userlogin and to display appropriate prompt. However, there are other environment variables are set to default values  after login.

Q10.
~~~~~~~~~~~~~~
After changing from environ to envp, the prompt display way lightened up the same way as it is in the student user, so all previous environment variables have been preserved, except those we change: HOME, USERNAME, etc.

Q11.
~~~~~~~~~~~~~~
The 3000userlogin calls this SYS calls:
SYS_setgid(1002)                                                               
SYS_setuid(1002)
to set the uid and gid for the new environment. The arguments (1002) are taken from another system call to SYS_getuid() and SYS_getpid().

-------------------
Not the best of my tutorials, unfortunately. 

=======================================================================================================================

TUTORIAL 5

TASKS. PART 1.

Q1.
~~~~~~~~~~~
When regular file is given to 3000test as an argument - Program reports:
     File name, inode number, length number, a count number.
When directory is given:
     File name, inode number, length number
When symbolic link is given:
     File name, inode number, length number, a count number.
When a device (character or block) is given:
     File name, inode number, length 0.
     

Q2.
~~~~~~~~~~~
After changing stat() to lstat() the program returns the information about symbolic link rather then the file it refers to. The inode number and length contain different information for the symbolic link and the file it refers to.

        if (lstat(fn, &statbuf)) {
                report_error(strerror(errno));
        }
        len = statbuf.st_size;
	
	if(len == 0)
	  bufsiz = PATH_MAX;
	
	bufsiz = len + 1;
	buf = malloc(bufsiz);
	
	if (buf == NULL) {
	  perror("malloc");
	  exit(EXIT_FAILURE);
	}

	nbytes = readlink(argv[1], buf, bufsiz);
	if (nbytes == -1) {
	  perror("readlink");
	  exit(EXIT_FAILURE);
	}


Q3.
~~~~~~~~~~~
The readlink() reads the name of the target file.


PART 2.

Q1.
~~~~~~~~~~~
The left most numbers (column) is the inode of the specific file or directory.

Q2.
~~~~~~~~~~~~~
The logical size of foo is 268435456 bytes (256 Mb). Physical size is 262148 (~257 Mb).
In comparison, foo2 has the same logical size, but much smaller physical size - 8192 bytes. This could be explained by optimization of the hole in the file created by "seek", which fills the beginning of the file with zeros.

Q3.
~~~~~~~~~~~~~
When making file system ext4 in foo block file device the physical size decreased to 16632 bytes, while logical remained the same.
On the other hand, when creating filesystem in foo2, the physical size increased to 16632.

Q4.
~~~~~~~~~~~~~
To check file system in foo for errors run : fsck foo
(some optional arguments may be needed).

Q5.
~~~~~~~~~~~~~
After creating the test.txt file in /mnt and then mounting the foo file system to /mnt, the test.txt file disappered from the /mnt. Instead, the lost+found directory got created in the /mnt directory, which could not be accessed by user.

Q6.
~~~~~~~~~~~~~
When running df /dev/loop0  is shown as a device mounted to /mnt. When running mount - foo on /mnt type ext4 (rw,relatime).

Q7.
~~~~~~~~~~~~~~
When unmounting the device from /mnt - the test.txt appears back in the directory, and lost+found is gone.


Q8.
~~~~~~~~~~~~~~
When running dd with option "conv=notrunc" the behaviour changed in the following way:
conv parameter converts the file as per comma separated list, and notrunc means that output file should not be truncated after that, which we could see by checking the size of the file.

Q9.
~~~~~~~~~~~~~~
When mount foo  /mnt, following error occur:
mount: /mnt: wrong fs type, bad option, bad superblock on /dev/loop0, missing codepage or helper program, or other error.

Q10.
~~~~~~~~~~~~~~
To make foo mountable again we have to specify the file system with mkfs.ext4 command. I'm not sure about the second part of the question, but filesystem looks for mentioned FS in /proc to apply it to the device. What characteristics of FS enables this command to work?  - journaling, probably, and ability to fix the system from backup superblocks.

-------------------


